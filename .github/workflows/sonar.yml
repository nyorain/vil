name: C/C++ CI

on:
  push:
    branches: [ main ]
    paths:
      - "**.c"
      - "**.cpp"
      - "**.h"
      - "**.hpp"
      - "**.inl"
      - "**meson.build"
      - "**sonar.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "**.c"
      - "**.cpp"
      - "**.h"
      - "**.hpp"
      - "**.inl"
      - "**meson.build"
      - "**sonar.yml"

# Original skeleton taken from 
# https://github.com/sonarsource-cfamily-examples/linux-cmake-gh-actions-sc

jobs:
  sonar:
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.4.0.2170
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - run: pip install meson ninja
      # Make sure the sonar cache is persistent
      - name: Cache Sonar
        uses: actions/cache@v2
        with:
          path: /home/runner/cache-sonar
          key: ${{ runner.os }}-cache-sonar
      - name: Install deps
        run: sudo apt-get -y -f install libvulkan-dev libvulkan1 vulkan-tools glslang-tools
          libxkbcommon-dev libwayland-dev libxcb1-dev wayland-protocols libxcb-ewmh-dev
          libxcb-icccm4-dev libxcb-shm0-dev libxcb-present-dev libxcb-xinput-dev libxcb-xkb-dev
          libxkbcommon-x11-dev libx11-dev libx11-xcb-dev
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
      - name: Run build-wrapper
        run: |
          meson setup build/ --backend=ninja -Dunit-tests=true -Dx11-hook=false -Dthrow-on-assert=true
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} meson compile -C build
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

