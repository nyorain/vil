#version 460

#extension GL_GOOGLE_include_directive : require

// layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;
layout(local_size_x = 8, local_size_y = 8) in;

layout(push_constant) uniform PCR {
	int level;
	int layer;
	// NOTE: for a full histogram this would be 1.
	// For larger values, we effectively only sample every nth texe. 
	// Useful as optimization on larger images.
	int texelSkip;
} pcr;

layout(set = 0, binding = 0) buffer Dst {
	uvec4 outMin;
	uvec4 outMax;
	uint outFlags;
};

const uint flagHasNan = 1u;
const uint flagHasInf = 2u;

#define SAMPLE_TEX_BINDING 1
#include "sample.glsl"
#include "histogram.glsl"

// TODO PERF: sample multiple texels per invocation and do local accumulation
//   first to avoid aotmic ops
// TODO PERF: use subgroup stuff if available for faster reduction, less aotmics

void main() {
	ivec3 coords = ivec3(gl_GlobalInvocationID.xyz);
	coords *= pcr.texelSkip;
	coords.z += pcr.layer;
	if(!coordsInside(coords, pcr.level)) {
		return;
	}

	vec4 col = fetchTex(coords, pcr.level);

	// TODO: could speed this up with subgroup ballot
	// so we only do atomic instructions once per subgroup

	for(uint i = 0u; i < 4; ++i) {
		// disregard inf and nan
		if(isinf(col[i])) {
			atomicOr(outFlags, flagHasInf);
			continue;
		}

		if(isnan(col[i])) {
			atomicOr(outFlags, flagHasNan);
			continue;
		}

		// atomic instructions are only allowed on uints in core vulkan/glsl.
		// it's possible to transform floats into a uints while keeping
		// them ordered.
		uint v = floatToUintOrdered(col[i]);
		atomicMin(outMin[i], v);
		atomicMax(outMax[i], v);
	}
}
