#version 460

#extension GL_EXT_buffer_reference : require
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 64) in;

layout(buffer_reference, std430, buffer_reference_align = 4) buffer Src {
	uint vals[];
};

layout(buffer_reference, std430, buffer_reference_align = 4) buffer Dst {
	uint vals[];
};

layout(buffer_reference, std430, buffer_reference_align = 4) buffer Mappings {
	uint vals[];
};

layout(push_constant) uniform PCR {
	Src src;
	Dst dst;
	Mappings mappings;
	uint stride;
	uint handleSize;
	uint count;
	uint groupCount;
} pcr;

void main() {
	const uint id = gl_GlobalInvocationID.x;
	if(id >= pcr.count) {
		return;
	}

	uint currEntry = 0u;
	uint offset = id * pcr.stride;
	uint mappingStride = 2 * pcr.handleSize;
	for(uint i = 0u; i < pcr.handleSize; ++i) {
		uint src = pcr.src.vals[offset + i];
		while(src > pcr.mappings.vals[currEntry * mappingStride + i] &&
				currEntry < pcr.groupCount) {
			++currEntry;
		}
	}

	for(uint i = 0u; i < pcr.handleSize; ++i) {
		uint mapOff = currEntry * mappingStride + i + pcr.handleSize;
		uint src = pcr.mappings.vals[mapOff];
		pcr.dst.vals[offset + i] = src;
	}

	// copy remaining data, might contain constants or stuff
	for(uint i = pcr.handleSize; i < pcr.stride; ++i) {
		pcr.dst.vals[offset + i] = pcr.src.vals[offset + i];
	}
}

